exports = async function(changeEvent) {
  // A Database Trigger will always call a function with a changeEvent.
  // Documentation on ChangeEvents: https://docs.mongodb.com/manual/reference/change-events/
  console.log("Updated date in hospitalization");
  // This sample function will listen for events and replicate them to a collection in a different Database
  // Access the _id of the changed document:
  const docId = 0;
  console.log(changeEvent)

  // Get the MongoDB service you want to use (see "Linked Data Sources" tab)
  // Note: In Atlas Triggers, the service name is defaulted to the cluster name.
  const serviceName = "mongodb-atlas";
  const database = "BDNOSQL";
  const collection = context.services.get(serviceName).db(database).collection(changeEvent.ns.coll);

  // Get the "FullDocument" present in the Insert/Replace/Update ChangeEvents
  try {
    // If this is a "delete" event, delete the document in the other collection
    if (changeEvent.operationType === "delete") {
      await collection.deleteOne({"_id": docId});
    }

    // If this is an "insert" event, insert the document into the other collection
    else if (changeEvent.operationType === "insert") {
      await collection.insertOne(changeEvent.fullDocument);
    }

    // If this is an "update" or "replace" event, then replace the document in the other collection
    else if (changeEvent.operationType === "update" || changeEvent.operationType === "replace") {
      await collection.replaceOne({"_id": docId}, changeEvent.fullDocument);
      var document = changeEvent.update.fullDocument;
      var documentBefore = changeEvent.update.fullDocumentBeforeChange;
      console.log("documentBefore");
      console.log(document);
      console.log("documentAfter\n");
      console.log(documentAfter);
      for (var i=0; i<documentBefore.episodes.length; i++) {

      for (var j=0; j<documentBefore.episodes[i].hospitalizations[j].length; j++) {
          var hospitalizationBefore = documentBefore.episodes[i].hospitalizations[j]; 
          var hospitalization = document.episodes[i].hospitalizations[j];
          
          if (hospitalizationBefore.dischargeDate == null && hospitalization.dischargeDate != null) {
              var roomCost = hospitalization.room.room_cost;
  

              var testCost = 0;
              for (var k=0; k<hospitalization.screenings.length; k++) {
                  testCost += hospitalization.screenings[k].screening_cost;
              }
  
  
              var otherCharges = 0;
              for (var k=0; k<hospitalization.prescriptions.length; k++) {
                  otherCharges += hospitalization.prescriptions[k].medicine.m_cost * hospitalization.prescriptions[k].medicine_quantity;
              }
  
  

              var totalCost = roomCost + testCost + otherCharges;
  

              await collection.insertOne({
                  idepisode: document.idepisode,
                  room_cost: roomCost,
                  test_cost: testCost,
                  other_charges: otherCharges,
                  total: totalCost,
                  payment_status: "PENDING",
                  registered_at: new Date()
              });
          }
      }
}
    }
  } catch(err) {
    console.log("error performing mongodb write: ", err.message);
  }
};




exports = async function(changeEvent) {
  // A Database Trigger will always call a function with a changeEvent.
  // Documentation on ChangeEvents: https://docs.mongodb.com/manual/reference/change-events/
  console.log("Updated date in hospitalization");
  // This sample function will listen for events and replicate them to a collection in a different Database
  // Access the _id of the changed document:
  const docId = 0;
  console.log(changeEvent.operationType)

  // Get the MongoDB service you want to use (see "Linked Data Sources" tab)
  // Note: In Atlas Triggers, the service name is defaulted to the cluster name.
  const serviceName = "bdnosql";
  const database = "BDNOSQL";
  const collection = context.services.get(serviceName).db(database).collection(changeEvent.ns.coll);

  // Get the "FullDocument" present in the Insert/Replace/Update ChangeEvents
  try {

    // If this is an "update" or "replace" event, then replace the document in the other collection
    if (changeEvent.operationType === "update" || changeEvent.operationType === "replace") {
      
      var document = changeEvent.fullDocument;
      var documentBefore = changeEvent.fullDocumentBeforeChange;
      console.log("documentBefore");
      console.log(documentBefore);
      console.log("documentAfter\n");
      console.log(document);
      var flag = false;
      
      for (var i=0; i<documentBefore.episodes.length; i++) {
  
        for (var j=0; j<documentBefore.episodes[i].hospitalizations[j].length; j++) {
            var hospitalizationBefore = documentBefore.episodes[i].hospitalizations[j]; 
            var hospitalization = document.episodes[i].hospitalizations[j];
            
            if (hospitalizationBefore.dischargeDate == null && hospitalization.dischargeDate != null) {
                flag = true;
                var roomCost = hospitalization.room.room_cost;
    
  
                var testCost = 0;
                for (var k=0; k<hospitalization.screenings.length; k++) {
                    testCost += hospitalization.screenings[k].screening_cost;
                }
    
    
                var otherCharges = 0;
                for (var k=0; k<hospitalization.prescriptions.length; k++) {
                    otherCharges += hospitalization.prescriptions[k].medicine.m_cost * hospitalization.prescriptions[k].medicine_quantity;
                }
    
    
  
                var totalCost = roomCost + testCost + otherCharges;
                
                
  
                await collection.insertOne({
                    idepisode: document.idepisode,
                    room_cost: roomCost,
                    test_cost: testCost,
                    other_charges: otherCharges,
                    total: totalCost,
                    payment_status: "PENDING",
                    registered_at: new Date()
                });
                
                console.log("Cost of the room updated to: "+totalCost);
            }
          
      }
      if (!flag)
        await collection.replaceOne({"_id": docId}, changeEvent.fullDocument);
    }
    
    console.log("Succesfully updated the document");
    }
  } catch(err) {
    console.log("error performing mongodb write: ", err.message);
  }
};



